void BADGLShowScreen(SDL_Surface* screen){
       if(!glscinit){
        glscinit=1;
        delayTexCur=0;
        glGenTextures(1, &vct);
          glGenTextures(1, &sct);
        glGenTextures(1, &lsct);


        glBindTexture(GL_TEXTURE_2D, sct);
//        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  //      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
   
        
    }
//      return;
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   
        double my_glOpt[GLOPTS];
        calcGlOpt(my_glOpt);
     
        glViewport(0, 0, GLW, GLH);
        glMatrixMode(GL_PROJECTION);
        
        glPushMatrix();


        
        glLoadIdentity();
        glOrtho(0.0f, GLW, GLH, 0.0f, -1.0f, 1.0f);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
        screen2Gl(NULL,1);
        glPopMatrix();
    //  return;
    
    //else{
      //  if(my_glOpt[1]>0.05)
    //        blur_tex_zoom_in(lsct,my_glOpt[1]*10,GLW, GLH);
//            #define GLOPTS 4
//double glOpt[GLOPTS];
//double lglOpt[GLOPTS];

    //}
    double vfop1=getOpt("videoFile1");
    double vfop2=getOpt("videoFile2");
    double vfop3=getOpt("videoFile3");

    
     if(vfop1+vfop2+vfop3>0.00001){
            getFrame(&video,&videoh,&videow);
            placeTexOnGlScreen(video,videoh,videow,vfop1);
        }
    
    if(drawGLZ || mode!=6)
        screen2Gl(screen,1-my_glOpt[14]);
    else{
        screen2Gl(NULL,1-my_glOpt[14]);
    }
    if(my_glOpt[0]>0.0001){
     //   glBlendEquation(GL_);
         glBlendFunc(GL_SRC_ALPHA,getOpt("glBlendMetod")>0.5?GL_ONE_MINUS_SRC_ALPHA:GL_ONE);//);
  //        glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);//);

  //!!          glBlendFunc(GL_SRC_ALPHA,GL_SRC_ALPHA);//);
      //    glBlendFunc(GL_SRC_COLOR,GL_SRC_COLOR);//);

       //   glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);//);
        
          glBindTexture(GL_TEXTURE_2D, lsct);
//          double ap;
  //        ap=getOpt("antiPuddle");
    //      fprintf(stderr,"ap:%f\n",ap);
  //        glColor4f(my_glOpt[0],my_glOpt[0],my_glOpt[0],my_glOpt[0]);
        glColor4f(1,1,1,my_glOpt[0]);
//glBlendColor(1,1,1,my_glOpt[0]);
          double zoomx,zoom,zoomTang;
          double zoomy;
          double alpha;
          double shiftA,shiftL;
          double x1,y1,x2,y2;
          zoom=(my_glOpt[2]-0.5)/10.;
          zoomTang=(my_glOpt[3]-0.5)/10.;
          
          alpha=(my_glOpt[4]-0.5)/5.;
          
          shiftL=my_glOpt[5];
          shiftA=(my_glOpt[6]-0.5)*2*M_PI;
          
          zoomx=zoom+zoomTang;
          zoomy=zoom-zoomTang;
          
          
          x1=zoomx+cos(shiftA)*shiftL/10.;
          y1=zoomy+sin(shiftA)*shiftL/10.;
          x2=1-zoomx+cos(shiftA)*shiftL/10.;
          y2=1-zoomy+sin(shiftA)*shiftL/10.;
          
          
          ROTASYM=my_glOpt[7]/0.5;
          glBegin(GL_TRIANGLE_STRIP);
                    glTexCoord2f (rotx(x1,y1,alpha),roty(x1,y1,alpha)); glVertex2f (0.0,GLH);
                    glTexCoord2f (rotx(x1,y2,alpha),roty(x1,y2,alpha)); glVertex2f (0.0,0);
                    glTexCoord2f (rotx(x2,y1,alpha),roty(x2,y1,alpha)); glVertex2f (0+GLW,GLH );
                    glTexCoord2f (rotx(x2,y2,alpha),roty(x2,y2,alpha)); glVertex2f (0+GLW,0);
           glEnd();




    }



        int ndelay;
        ndelay=my_glOpt[9]*(GLTEXDELAYN-1);
  
        glBindTexture(GL_TEXTURE_2D, lsct);
        glCopyTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 0, 0, GLW, GLH, 1);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);

    if(vfop2>0.00001){
//        getFrame(&video,&videoh,&videow);
        placeTexOnGlScreen(video,videoh,videow,vfop2);
    }

  
    if(my_glOpt[8]>0.0001){
          glBlendFunc(GL_SRC_ALPHA,getOpt("glBlendMetod")>0.5?GL_ONE_MINUS_SRC_ALPHA:GL_ONE);//);
      //    glBlendEquation(GL_MAX);
     //!!       glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);//);

          int curDelay;
          int steps,st;//VideoDelay Steps
          steps=1+my_glOpt[11]*(ndelay-1);
            if(steps<1)
                steps=1;

          for(st=0;st<steps;st++){
              curDelay=(delayTexCur+GLTEXDELAYN-ndelay+st)%GLTEXDELAYN;
              glBindTexture(GL_TEXTURE_2D, delayTex[curDelay]);
              double op;
              op=my_glOpt[8]/steps;
              glColor4f(1.0f,1.0f,1.0f,op/*delayGlOpt[curDelay][0]*/);

              double zoomx,zoom,zoomTang;
              double zoomy;
              double alpha;
              double shiftA,shiftL;
              double x1,y1,x2,y2;
              zoom=(my_glOpt[10])*(delayGlOpt[curDelay][2])/10.;
              zoomTang=(my_glOpt[10])*(delayGlOpt[curDelay][3])/10.;
          
              alpha=(my_glOpt[10])*(delayGlOpt[curDelay][4])/5.;
              
              shiftL=(my_glOpt[10])*delayGlOpt[curDelay][5];
              shiftA=(my_glOpt[10])*(delayGlOpt[curDelay][6])*2*M_PI;
          
              zoomx=zoom+zoomTang;
              zoomy=zoom-zoomTang;
          
          
              x1=zoomx+cos(shiftA)*shiftL/10.;
              y1=zoomy+sin(shiftA)*shiftL/10.;
              x2=1-zoomx+cos(shiftA)*shiftL/10.;
              y2=1-zoomy+sin(shiftA)*shiftL/10.;
          
          
              ROTASYM=my_glOpt[7]/0.5;
              glBegin(GL_TRIANGLE_STRIP);
                    glTexCoord2f (rotx(x1,y1,alpha),roty(x1,y1,alpha)); glVertex2f (0.0,GLH);
                    glTexCoord2f (rotx(x1,y2,alpha),roty(x1,y2,alpha)); glVertex2f (0.0,0);
                    glTexCoord2f (rotx(x2,y1,alpha),roty(x2,y1,alpha)); glVertex2f (0+GLW,GLH );
                    glTexCoord2f (rotx(x2,y2,alpha),roty(x2,y2,alpha)); glVertex2f (0+GLW,0);
               glEnd();

            }

    }

    glBindTexture(GL_TEXTURE_2D, delayTex[delayTexCur]);
    glCopyTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 0, 0, GLW, GLH, 0);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
 
//    delayTex[delayTexCur]
    if(vfop3>0.00001){
//        getFrame(&video,&videoh,&videow);
        placeTexOnGlScreen(video,videoh,videow,vfop3);
    }
 
  if(makeScreenShoot){
      if(screenShoot!=NULL){
        free(screenShoot);
        screenShoot=NULL;
      }
      fprintf(stderr,"SC!\n");
      makeScreenShoot=0;
      screenShoot=scrshooot(screenShootW,screenShootH);
  }

    glDisable(GL_BLEND);
  int j;
   for(j=0;j<GLOPTS;j++){
            delayGlOpt[delayTexCur][j]=0;
    }
   delayGlCount[delayTexCur]=0;


   if(my_glOpt[13]<0.001){
        for(i=0;i<GLTEXDELAYN;i++){
//        i=delayTexCur;
            delayGlCount[i]++;
            for(j=0;j<GLOPTS;j++){
                    if(j!=5&&j!=0)    
                        delayGlOpt[i][j]+=(my_glOpt[j]-0.5);//delayGlCount[i];
                    else if(j!=0)
                        delayGlOpt[i][j]=delayGlOpt[i][j]+my_glOpt[j]*(1+delayGlCount[i]*my_glOpt[12]);
            }
        }
    }else{
        double l1,l2,a1,a2,a,ll,aa;
        for(i=0;i<GLTEXDELAYN;i++){
//        i=delayTexCur;
            delayGlCount[i]++;
            
           l1=delayGlOpt[i][5];
           a1=(delayGlOpt[i][6])*2*M_PI;
           l2=my_glOpt[5]*(1+delayGlCount[i]*my_glOpt[12]);
           a2=my_glOpt[6]*2*M_PI;
           a=my_glOpt[4];
           ll=atan2(
            (cos(a1)*l1)*(cos(a1)*l1) + (sin(a2+a)*l2)*(sin(a2+a)*l2),           
           (sin(a1)*l1)*(sin(a1)*l1) + (sin(a2+a)*l2)*(sin(a2+a)*l2));
           aa=a1+a2;
//           delayGlOpt[i][4]=ll;
           delayGlOpt[i][5]=ll;
  //         delayGlOpt[i][6]=aa;
            
            //delayGlOpt[i][5]=delayGlOpt[i][5]+my_glOpt[5]*(1+delayGlCount[i]*my_glOpt[12]);

            for(j=0;j<GLOPTS;j++){
                    if(j!=5&&j!=0)    
                        delayGlOpt[i][j]+=(my_glOpt[j]-0.5)*(1+delayGlCount[i]*my_glOpt[12]);//delayGlCount[i];
            }
        }
    }
    delayTexCur++;
    if(delayTexCur>=GLTEXDELAYN)
         delayTexCur=0;
    


     //  glMatrixMode(GL_PROJECTION);
       // glPopMatrix();
      //  glMatrixMode(GL_MODELVIEW);
           
       glFlush();
       glFinish();

  //     glBindTexture(GL_TEXTURE_2D, lsct);
    
       SDL_GL_SwapBuffers();
 
}
