#ifndef INT64_C
#define INT64_C(c) (c ## LL)
#define UINT64_C(c) (c ## ULL)
#endif


 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
 #include "SDL/SDL.h"
#include "SDL_opengl.h"
#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <time.h> 
 #ifdef HAVE_AV_CONFIG_H
 #undef HAVE_AV_CONFIG_H
 #endif

#include <libavcodec/avcodec.h>


 #include "libavutil/mathematics.h"
 
 int W,H;
 #include"graphutil.cpp"
 #define INBUF_SIZE 4096
 #define AUDIO_INBUF_SIZE 20480
 #define AUDIO_REFILL_THRESH 4096
 void show_picture(SDL_Surface *screen,unsigned char *buf, int wrap, int w, int h){
     int x,y;
     for(x=0;x<w;x++)
        for(y=0;y<h;y++){
            putpixel(screen,x,y,buf [x*3+y*wrap] + ((int)buf [x*3+1+y*wrap])*256 + ((int)buf [x*3+2+y*wrap])*256*256);
            
         }
     SDL_Flip( screen ); 
 }
 
static void video_decode_example(SDL_Surface *screen, const char *filename) {
     AVCodec *codec;
     AVCodecContext *c= NULL;
     int frame, got_picture, len;
     FILE *f;
     AVFrame *picture;
     uint8_t inbuf[INBUF_SIZE + FF_INPUT_BUFFER_PADDING_SIZE];
     char buf[1024];
     AVPacket avpkt;
 
     av_init_packet(&avpkt);
 
     /* set end of buffer to 0 (this ensures that no overreading happens for damaged mpeg streams) */
     memset(inbuf + INBUF_SIZE, 0, FF_INPUT_BUFFER_PADDING_SIZE);
 
     printf("Video decoding\n");
 
     /* find the mpeg1 video decoder */
     codec = avcodec_find_decoder(CODEC_ID_MPEG1VIDEO);
     if (!codec) {
         fprintf(stderr, "codec not found\n");
         exit(1);
     }
 
     c= avcodec_alloc_context();
     picture= avcodec_alloc_frame();
 
     if(codec->capabilities&CODEC_CAP_TRUNCATED)
         c->flags|= CODEC_FLAG_TRUNCATED; /* we do not send complete frames */
 
     /* For some codecs, such as msmpeg4 and mpeg4, width and height
        MUST be initialized there because this information is not
        available in the bitstream. */
 
     /* open it */
     if (avcodec_open(c, codec) < 0) {
         printf( "could not open codec\n");
         exit(1);
     }
 
     /* the codec gives us the frame size, in samples */
 
     f = fopen(filename, "rb");
     if (f == NULL) {
         printf("could not open %s\n", filename);
         exit(1);
     }
 
     frame = 0;
     printf("start playing\n");
     for(;;) {
         avpkt.size = fread(inbuf, 1, INBUF_SIZE, f);
         
         if (avpkt.size == 0){
             printf("avpkt.size == 0\n");
             break;
         }
 
         /* NOTE1: some codecs are stream based (mpegvideo, mpegaudio)
            and this is the only method to use them because you cannot
            know the compressed data size before analysing it.
 
            BUT some other codecs (msmpeg4, mpeg4) are inherently frame
            based, so you must call them with all the data for one
            frame exactly. You must also initialize 'width' and
            'height' before initializing them. */
 
         /* NOTE2: some codecs allow the raw parameters (frame size,
            sample rate) to be changed at any frame. We handle this, so
 should also take care of it */
          /* here, we use a stream based decoder (mpeg1video), so we
            feed decoder and see if it could decode a frame */
         avpkt.data = inbuf;
         while (avpkt.size > 0) {
             len = avcodec_decode_video2(c, picture, &got_picture, &avpkt);
             if (len < 0) {
                 fprintf(stderr, "Error while decoding frame %d\n", frame);
                 exit(1);
             }
             if (got_picture) {
                 printf("saving frame %3d\n", frame);
                 fflush(stdout);
 
                 /* the picture is allocated by the decoder. no need to
                    free it */
//                 snprintf(buf, sizeof(buf), outfilename, frame);
                 show_picture(screen,picture->data[0], picture->linesize[0],
                          c->width, c->height);
                 printf("show frame %d\n",frame);
                 frame++;
             }
             avpkt.size -= len;
             avpkt.data += len;
         }
     }
 
     /* some codecs, such as MPEG, transmit the I and P frame with a
        latency of one frame. You must do the following to have a
        chance to get the last frame of the video */
     avpkt.data = NULL;
     avpkt.size = 0;
     len = avcodec_decode_video2(c, picture, &got_picture, &avpkt);
     if (got_picture) {
         printf("saving last frame %3d\n", frame);
         fflush(stdout);
 
         /* the picture is allocated by the decoder. no need to
            free it */
  //       snprintf(buf, sizeof(buf), outfilename, frame);
         show_picture(screen,picture->data[0], picture->linesize[0],c->width, c->height);
         sleep(1);
         frame++;
     }
 
     fclose(f);
 
     avcodec_close(c);
     av_free(c);
     av_free(picture);
     printf("\n");
 }
 
 int main(int argc, char **argv)
 {
     const char *filename;
     SDL_Surface* hello = NULL; 
	 SDL_Surface* screen = NULL;
     SDL_Surface *trueScreen = NULL ;
	 const SDL_VideoInfo* myPointer;
     SDL_Init( SDL_INIT_EVERYTHING ); 
	 SDL_putenv((char*)"SDL_VIDEO_WINDOW_POS=0,0");
	 myPointer = SDL_GetVideoInfo();
     W=myPointer->current_w;
     H=myPointer->current_h;
            
	 screen = SDL_SetVideoMode(W , H, 32, SDL_HWSURFACE |  SDL_NOFRAME | SDL_DOUBLEBUF/*|SDL_GL_DOUBLEBUFFER |SDL_OPENGL */); 
	 SDL_ShowCursor(0);
	 
 
 
 
     /* must be called before using avcodec lib */
     avcodec_init();
 
     /* register all the codecs */
     avcodec_register_all();
 
     video_decode_example(screen,"one.avi");


 	  SDL_Quit(); 
     return 0;
 }
